# Arquivo Mount3.py

import os
import sys
import re
from pathlib import Path
from FilesUtils import set_attrib, run_hidden, clear_target
from SaveServer import load_config
from Parameters import load_parameters

def ler_configuracoes():
    # Carrega todos os par√¢metros diretamente da fun√ß√£o load_parameters()
    network_drive, server_drive, source, symbolic, junctions, label, folders_ignored = load_parameters()

    # Carrega o nome do usu√°rio e as pastas selecionadas do ConfigFolders.ini
    user_name, selected_folders = load_config()

    return {
            "network_drive": network_drive,
        "server_drive": server_drive,
        "source": source,
        "symbolic": symbolic,
        "junctions": junctions,
        "label": label,
        "folders_ignored": folders_ignored,
        "user_name": user_name,
        "selected_folders": selected_folders
    }


def criar_juncoes(source, symbolic, junctions, selected_folders, folders_ignored):
    print("üìÅ Iniciando cria√ß√£o de jun√ß√µes...")
    symbolic.mkdir(parents=True, exist_ok=True)

    contador_sem_numero = 71
    padrao_numero = re.compile(r'^(\d{2})')

    for pasta in selected_folders:
        if pasta in folders_ignored:
            continue

        caminho_origem = source / pasta
        if not caminho_origem.exists():
            print(f"‚ö†Ô∏è  Pasta n√£o encontrada: {caminho_origem}")
            continue

        match = padrao_numero.match(pasta)
        if match:
            nome_link = match.group(1)
        else:
            if contador_sem_numero > 89:
                print("‚ùå N√∫mero m√°ximo de pastas sem numera√ß√£o excedido. Opera√ß√£o cancelada.")
                return
            nome_link = f"{contador_sem_numero:02d}"
            contador_sem_numero += 1

        link = symbolic / nome_link
        juncao = junctions / pasta

        run_hidden(f'mklink /D "{link}" "{caminho_origem}"')
        run_hidden(f'mklink /J "{juncao}" "{link}"')

    set_attrib(symbolic)
    print("‚úÖ Jun√ß√µes criadas com sucesso!")


def main():
    print("üîç Lendo arquivos de configura√ß√£o...")
    config = ler_configuracoes()

    usuario_logado = os.getlogin().strip()
    usuario_configurado = config["user_name"].strip()

    if usuario_logado.lower() != usuario_configurado.lower():
        print(f"üö´ Usu√°rio atual: '{usuario_logado}' n√£o corresponde ao usu√°rio permitido no .ini: '{usuario_configurado}'.")
        print("üîí Opera√ß√£o cancelada por seguran√ßa.")
        return

    print(f"üë§ Usu√°rio autenticado: {usuario_logado}")
    print(f"üìÅ Pastas selecionadas para jun√ß√£o: {config['selected_folders']}")
    print(f"üö´ Pastas ignoradas: {config['folders_ignored']}")

    # Limpa links existentes
    print("üßπ Limpando links e jun√ß√µes anteriores...")
    clear_target(config["symbolic"], config["junctions"])

    # Aplica as novas jun√ß√µes
    criar_juncoes(
        config["source"],
        config["symbolic"],
        config["junctions"],
        config["selected_folders"],
        config["folders_ignored"]
    )


if __name__ == "__main__":
    main()


# Arquivo Parameters.py
import os
from pathlib import Path
import configparser
import ast

folder_NetworkManager = Path(os.getenv("ProgramData")) / "NetworkManager"
# Cria a pasta se n√£o existir
folder_NetworkManager.mkdir(parents=True, exist_ok=True)
# Caminho completo do arquivo .ini
arquivo_config = folder_NetworkManager / "ConfigProgram.ini"

def save_parameters(
    network_drive: str,
    server_drive: str,
    source: str,
    symbolic: Path,
    junctions: Path,
    folders_ignored: set,
    label: str = 'Servidor'  # Adicionando o label como par√¢metro opcional
):

    config = configparser.ConfigParser()
    
    config['Parameters'] = {
        'network_drive': network_drive,
        'server_drive': server_drive,
        'source': source,
        'symbolic': str(symbolic),
        'junctions': str(junctions),
        'folders_ignored': str(folders_ignored),
        'label': label
    }

    with open(arquivo_config, 'w') as configfile:
        config.write(configfile)

def load_parameters():
    config = configparser.ConfigParser()
    config.read(arquivo_config)

    network_drive = config.get('Parameters', 'network_drive', fallback='O:')
    server_drive = config.get('Parameters', 'server_drive', fallback='X:')
    #source = Path(config.get('Parameters', 'source', fallback=r'O:\')).resolve()
    source = config.get('Parameters', 'source', fallback=r'O:')
    symbolic = Path(config.get('Parameters', 'symbolic', fallback=r'X:\O')).resolve()
    junctions = Path(config.get('Parameters', 'junctions', fallback=r'X:\')).resolve()
    label = config.get('Parameters', 'label', fallback='Servidor')

    # Interpreta a string como set
    folders_ignored_str = config.get('Parameters', 'folders_ignored', fallback='set()')
    try:
        folders_ignored = set(ast.literal_eval(folders_ignored_str))
    except (ValueError, SyntaxError):
        folders_ignored = set()

    return network_drive, server_drive, source, symbolic, junctions, label, folders_ignored



def load_parameters2():
    config = configparser.ConfigParser()
    config.read(arquivo_config)

    network_drive = config.get('Parameters', 'network_drive', fallback='O:')
    server_drive = config.get('Parameters', 'server_drive', fallback='X:')
    label = config.get('Parameters', 'label', fallback='Servidor')
    return network_drive, server_drive, label
